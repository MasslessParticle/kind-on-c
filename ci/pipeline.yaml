resource_types:
- name: google-cloud-storage
  type: registry-image
  source:
    repository: frodenas/gcs-resource

config:
- &jobsArePublic true
- &imageRepo     gcr.io/cf-london-servces-k8s/kind-on-c/kind-on-c
- &baseImageRepo ubuntu
- &gitBotName    kind-on-c pipeline
- &gitBotEmail   hhorl+kindonc@pivotal.io
- k8s-branches:
  - &k8sBranchMaster        master
  - &k8sBranchCurrent       release-1.16
  - &k8sBranchCurrentMinus1 release-1.15
  - &k8sBranchCurrentMinus2 release-1.14
- &imageBuildingFiles
  - Dockerfile
- &kindOnCGitSource
  uri: git@github.com:pivotal-k8s/kind-on-c
  branch: dev
  private_key: ((github.push_key))
  git_config:
  - name: user.name
    value: *gitBotName
  - name: user.email
    value: *gitBotEmail
- &testTask
  task: run-tests
  file: kind-on-c/kind.yaml
  privileged: true
  params:
    KIND_TESTS: |
      set -x
      kubectl get nodes -o wide
      kubectl get all --all-namespaces
      kubectl run test --rm=true --image=busybox -i --wait=true --restart=Never --command -- \
        echo 'The pod says: the kubernetes cluster sure works!'
- &bashTaskConf
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: bash
- &golangTaskConf
  platform: linux
  image_resource:
    type: registry-image
    source:
      repository: "golang"

resources:
- name: base-image
  type: registry-image
  source:
    repository: *baseImageRepo
- name: image
  type: registry-image
  source:
    repository: *imageRepo
    username: ((registry.username))
    password: ((registry.password))
    tag: ci
- name: kind-build
  type: google-cloud-storage
  source:
    bucket: kind-on-c-pipeline
    json_key: ((bucket.key))
    versioned_file: "pipeline-builds/kind-linux-amd64"
- name: builder-task
  type: git
  source:
    uri: https://github.com/concourse/builder-task
- name: dockerfile
  type: git
  source:
    << : *kindOnCGitSource
    paths: *imageBuildingFiles
- name: kind-on-c-dev
  type: git
  source:
    << : *kindOnCGitSource
    ignore_paths: *imageBuildingFiles
- name: kind-on-c-master
  type: git
  source:
    << : *kindOnCGitSource
    branch: master
- name: kind-release
  type: github-release
  source:
    owner: kubernetes-sigs
    repository: kind
    access_token: ((github.token))
    pre_release: true
- name: kind-git-master
  type: git
  source:
    uri: https://github.com/kubernetes-sigs/kind
    branch: master
- name: k8s-git-current-minus-2
  type: git
  source:
    uri: https://github.com/kubernetes/kubernetes
    branch: *k8sBranchCurrentMinus2
- name: k8s-git-current-minus-1
  type: git
  source:
    uri: https://github.com/kubernetes/kubernetes
    branch: *k8sBranchCurrentMinus1
- name: k8s-git-current
  type: git
  source:
    uri: https://github.com/kubernetes/kubernetes
    branch: *k8sBranchCurrent
- name: k8s-git-master
  type: git
  source:
    uri: https://github.com/kubernetes/kubernetes
    branch: *k8sBranchMaster

jobs:
- name: update image
  public: *jobsArePublic
  plan:
  - in_parallel:
      fail_fast: true
      steps:
      - get: builder-task
      - get: base-image
        trigger: true
      - get: dockerfile
        trigger: true
      - get: kind-on-c-dev
  - task: build
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: concourse/builder-task
      params:
        REPOSITORY: *imageRepo
        CONTEXT: dockerfile
        TAG: ci
        BASE_IMAGE_REPO: *baseImageRepo
      inputs:
      - name: base-image
      - name: builder-task
      - name: dockerfile
      outputs:
      - name: image
      - name: rootfs
      - name: tag
      caches:
      - path: cache
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          set -u
          set -o pipefail

          kind_on_c_ver="$( git --git-dir=dockerfile/.git describe --always --tags )"
          base_img_ver="$( cat base-image/digest )"

          cat <<EOF > image/build_args
          KIND_ON_C_VERSION=${kind_on_c_ver}
          BASE_IMAGE=${BASE_IMAGE_REPO}@${base_img_ver}
          EOF

          export BUILD_ARGS_FILE=image/build_args
          echo "$TAG" > tag/tag

          builder-task/build

          img ls -s /scratch/state \
            | awk -vimg="${REPOSITORY}:${TAG}" '$0 ~ img { print $NF }' \
            | sed 's/:/-/g' \
            > tag/tag
  - put: image
    params:
      image: image/image.tar
      additional_tags: tag/tag
  # - task: test new image ## TODO
  - task: update image revision
    image: rootfs # use image from the builder task
    config:
      platform: linux
      params:
        GIT_AUTHOR_NAME: *gitBotName
        GIT_AUTHOR_EMAIL: *gitBotEmail
      inputs:
      - name: tag
      - name: kind-on-c-dev
      outputs:
      - name: kind-on-c-dev
      run:
        path: bash
        args:
        - -c
        - |
          set -e
          set -u
          set -o pipefail

          tag="$( cat tag/tag )"
          taskConf="${PWD}/kind-on-c-dev/kind.yaml"
          tmpFile="$(mktemp)"
          trap 'rm -f -- "$tmpFile"' EXIT

          cd kind-on-c-dev

          yq -y --arg tag "$tag" '.image_resource.source.tag = $tag' "$taskConf" > "$tmpFile"
          cat "$tmpFile" > "$taskConf"

          git config --global user.email "$GIT_AUTHOR_EMAIL"
          git config --global user.name "$GIT_AUTHOR_NAME"

          git add "$taskConf"
          git diff --quiet && git diff --staged --quiet || {
            git commit --quiet --message "Update container image to '${tag}'"
            git show -1 | cat
          }
  - put: kind-on-c-dev
    params:
      repository: kind-on-c-dev
      rebase: true

- name: latest kind release
  public: *jobsArePublic
  plan:
  - in_parallel: &commonTestInputsForKindRelease
    - get: kind-on-c
      resource: kind-on-c-dev
      trigger: true
      passed: &allFeatureTests
      - custom kind config
      - HA control plane
      - output node image & rootfs
      - user inputs & outputs
      - MetalLB & exposed services
    - get: kind-release
      trigger: true
      params:
        globs:
        - kind-linux-amd64
      passed: *allFeatureTests
  - *testTask
- name: latest kind release with k8s-master
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindRelease
    - get: k8s-git
      resource: k8s-git-master
  - << : *testTask
- name: latest kind release with k8s-current
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindRelease
    - get: k8s-git
      resource: k8s-git-current
  - << : *testTask
- name: latest kind release with k8s-current-minus-1
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindRelease
    - get: k8s-git
      resource: k8s-git-current-minus-1
  - << : *testTask
- name: latest kind release with k8s-current-minus-2
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindRelease
    - get: k8s-git
      resource: k8s-git-current-minus-2
  - << : *testTask

- name: promote
  public: *jobsArePublic
  plan:
  - get: kind-on-c-dev
    trigger: true
    passed:
    # all tests for the kind release
    - latest kind release
    - latest kind release with k8s-master
    - latest kind release with k8s-current
    - latest kind release with k8s-current-minus-1
    - latest kind release with k8s-current-minus-2
    # all tests for kind master
    - kind master
    - kind master with k8s-current-minus-2
    - kind master with k8s-current-minus-1
    - kind master with k8s-current
    - kind master with k8s-master
  - put: kind-on-c-master
    params:
      repository: kind-on-c-dev

- name: build kind from master
  public: *jobsArePublic
  plan:
  - get: kind-git-master
    trigger: true
  - task: build
    config:
      << : *golangTaskConf
      inputs:
      - name: kind-git-master
        path: src
      outputs:
      - name: kind-bin
      params:
        CGO_ENABLED: 0
        GO111MODULE: "on"
      run:
        path: bash
        args:
        - -c
        - |
          set -e

          cd ./src
          go get -d ./...
          go build main.go

          mv main "../kind-bin/kind-linux-amd64"

          ls -l ../kind-bin/
  - put: kind-build
    params:
      file: kind-bin/kind-linux-amd64

- name: kind master
  public: *jobsArePublic
  plan:
  - in_parallel: &commonTestInputsForKindMaster
    - get: kind-on-c
      resource: kind-on-c-dev
      trigger: true
      passed: *allFeatureTests
    - get: kind-release
      passed: [ build kind from master ]
      resource: kind-build
      trigger: true
  - *testTask
- name: kind master with k8s-current-minus-2
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindMaster
    - get: k8s-git
      resource: k8s-git-current-minus-2
  - << : *testTask
- name: kind master with k8s-current-minus-1
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindMaster
    - get: k8s-git
      resource: k8s-git-current-minus-1
  - << : *testTask
- name: kind master with k8s-current
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindMaster
    - get: k8s-git
      resource: k8s-git-current
  - << : *testTask
- name: kind master with k8s-master
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForKindMaster
    - get: k8s-git
      resource: k8s-git-master
  - << : *testTask

# additional "feature" tests
- name: HA control plane
  public: *jobsArePublic
  plan:
  - in_parallel: &commonTestInputsForFeatures
    - get: kind-on-c
      resource: kind-on-c-dev
      trigger: true
    - get: kind-release
      trigger: true
      params:
        globs:
        - kind-linux-amd64
  - << : *testTask
    params:
      KIND_CONFIG: |
        kind: Cluster
        apiVersion: kind.sigs.k8s.io/v1alpha3
        nodes:
        - role: control-plane
        - role: control-plane
        - role: control-plane
      KIND_TESTS: |
        set -x

        . kind-on-c/lib.inc.sh && log::init

        expectedNrOfNodes=3      # 0 worker + 3 control plane nodes
        expectedNrOfContainers=4 # 0 worker + 3 control plane + 1 loadbalancer

        actualNrOfContainers=$( kind get nodes | wc -l )
        [[ $expectedNrOfContainers -eq $actualNrOfContainers ]] || {
          log::error "Expectd to find ${expectedNrOfContainers} kind nodes, found ${actualNrOfContainers}"
          exit 1
        }

        actualNrOfNodes=$( kubectl get nodes --no-headers | wc -l )
        [[ $expectedNrOfNodes -eq $actualNrOfNodes ]] || {
          log::error "Expectd to find ${expectedNrOfNodes} kubernetes nodes, found ${actualNrOfNodes}"
          exit 2
        }
- name: custom kind config
  public: *jobsArePublic
  plan:
  - in_parallel: *commonTestInputsForFeatures
  - << : *testTask
    params:
      KIND_CONFIG: |
        kind: Cluster
        apiVersion: kind.sigs.k8s.io/v1alpha3
        nodes:
        - role: control-plane
        - role: worker
      KIND_TESTS: |
        set -x
        . kind-on-c/lib.inc.sh && log::init
        nrOfNodes=$( kubectl get nodes --no-headers | wc -l )
        [[ $nrOfNodes -eq 2 ]] || {
          log::error "Expectd 2 nodes, found $nrOfNodes"
          exit 1
        }
- name: output node image & rootfs
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForFeatures
    - get: k8s-git
      resource: k8s-git-current-minus-1
  - << : *testTask
    task: export node image
    params:
      EXPORT_NODE_IMAGE: 1
      EXPORT_NODE_ROOTFS: 1
      KIND_TESTS: '' # skip bringing up the cluster, only create the image
  - task: run rootfs
    image: exported-node-rootfs # the rootfs of the node image built by kind, from the previous task
    config:
      platform: linux
      inputs:
      - name: exported-node-image
      run:
        path: bash
        args:
        - -xeuc
        - |
          . kind-on-c/lib.inc.sh && log::init
          expImg='exported-node-image/image.tar'
          test -e "$expImg" || {
            log::error "'${expImg}' not found. What's with that\!?"
            exit 1
          }
  - << : *testTask
    task: run-tests with previously exported node image
    input_mapping:
      node-image: exported-node-image
    params:
      EXPECTED_BRANCH: *k8sBranchCurrentMinus1
      KIND_CONFIG: |
        kind: Cluster
        apiVersion: kind.sigs.k8s.io/v1alpha3
        nodes:
        - role: control-plane
      KIND_TESTS: |
        set -x
        . kind-on-c/lib.inc.sh && log::init

        # convert the branch name 'release-1.15' to 'v1.15.' which can be used
        # as part of a glob for the version comparison
        expectedVer="v${EXPECTED_BRANCH/#release-}."
        actualVer="$( kubectl get nodes -o json | jq -r .items[0].status.nodeInfo.kubeletVersion )"
        [[ $actualVer == "$expectedVer"* ]] || {
          log::error "Expected APIServer to match version '${expectedVer}', got '${actualVer}'"
          exit 1
        }
- name: user inputs & outputs
  public: *jobsArePublic
  plan:
  - in_parallel:
    - in_parallel: *commonTestInputsForFeatures
    # those are just random inputs, to show how one could aggregate multiple
    # inputs and prepare them for kind-on-c
    - { get: input-1 , resource: builder-task }
    - { get: input-2 , resource: dockerfile }
  - task: aggregate inputs
    config:
      << : *bashTaskConf
      inputs:
      - name: input-1
      - name: input-2
      outputs:
      - name: agg-inputs
      run:
        path: bash
        args:
        - -xeuc
        - |
          cp -a input-1 agg-inputs/
          cp -a input-2 agg-inputs/
  - << : *testTask
    task: use inputs & populate outputs
    params:
      KIND_PRE_START: |
        set -x
        cp -a inputs/input-1 outputs/eins
        cp -a inputs/input-2 outputs/zwei
    input_mapping:
      inputs: agg-inputs
  - task: check aggregated outputs
    config:
      << : *bashTaskConf
      inputs:
      - name: outputs
      run:
        path: bash
        args:
        - -xeuc
        - |
          . kind-on-c/lib.inc.sh && log::init
          expectedOutputs=( outputs/eins outputs/zwei )
          for o in "${expectedOutputs[@]}"
          do
            [ -d "$o" ] || {
              log::error "expected output '$o' to exist"
              exit 1
            }
          done
- name: MetalLB & exposed services
  public: *jobsArePublic
  plan:
  - in_parallel: *commonTestInputsForFeatures
  - << : *testTask
    params:
      INSTALL_METALLB: 1
      KIND_TESTS: |
        set -x

        PORT=8080
        NAME='echo'
        IMG='inanimate/echo-server'

        kubectl run "$NAME" --image="$IMG" --replicas=2 --port="$PORT"
        kubectl expose deployment "$NAME" --type=LoadBalancer

        connectFromExt() {
          local extIP
          extIP="$( kubectl get service "$NAME" -o 'jsonpath={.status.loadBalancer.ingress[0].ip}' 2>/dev/null )"

          [ -n "$extIP" ] || return 1

          curl --silent --fail "http://${extIP}:${PORT}"
        }

        . kind-on-c/lib.inc.sh && log::init

        # try every 6 seconds, 20 times -> 2 minutes
        retry 20 6 connectFromExt

groups:
- name: all
  jobs:
  - promote
  - latest kind release
  - latest kind release with k8s-master
  - latest kind release with k8s-current
  - latest kind release with k8s-current-minus-1
  - latest kind release with k8s-current-minus-2
  - build kind from master
  - kind master
  - kind master with k8s-current-minus-2
  - kind master with k8s-current-minus-1
  - kind master with k8s-current
  - kind master with k8s-master
  - custom kind config
  - HA control plane
  - output node image & rootfs
  - user inputs & outputs
  - MetalLB & exposed services
- name: image
  jobs:
  - update image
- name: kind release
  jobs:
  - latest kind release
  - latest kind release with k8s-master
  - latest kind release with k8s-current
  - latest kind release with k8s-current-minus-1
  - latest kind release with k8s-current-minus-2
- name: kind master
  jobs:
  - build kind from master
  - kind master
  - kind master with k8s-current-minus-2
  - kind master with k8s-current-minus-1
  - kind master with k8s-current
  - kind master with k8s-master
- name: features
  jobs:
  - custom kind config
  - HA control plane
  - output node image & rootfs
  - user inputs & outputs
  - MetalLB & exposed services
- name: promote
  jobs:
  - promote
